{"version":3,"sources":["components/Redux/Contacts/contacts-action.jsx","components/Redux/Contacts/contacts-reducer.jsx","components/Redux/store.js","components/Redux/Contacts/contacts-selectors.jsx","components/Form/Form.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","index.js"],"names":["actions","addContact","createAction","payload","name","number","id","shortId","generate","deleteContact","changeFilter","contactItems","createReducer","state","filter","_","combineReducers","contactsPersistConfig","key","storage","blacklist","rootReducer","contacts","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","storeExp","persistor","persistStore","getContacts","getFilter","getFiltredContacts","lowerCasedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","onInputChange","event","currentTarget","value","onSubmit","preventDefault","find","contact","alert","onChange","type","pattern","title","required","Filter","e","ContactList","map","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67800445.chunk.js","sourcesContent":["import shortId from \"shortid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = createAction(\"contacts/Add\", ({ name, number }) => {\r\n  return {\r\n    payload: {\r\n      name,\r\n      number,\r\n      id: shortId.generate(),\r\n    },\r\n  };\r\n});\r\n\r\nconst deleteContact = createAction(\"contacts/Delete\");\r\n\r\nconst changeFilter = createAction(\"contacts/changeFilter\");\r\n\r\nconst actions = { addContact, deleteContact, changeFilter };\r\n\r\nexport default actions;\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./contacts-action\";\r\n\r\nconst contactItems = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contactItems,\r\n  filter,\r\n});\r\n","import {\r\n  combineReducers,\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n} from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport contactsReducer from \"./Contacts/contacts-reducer\";\r\n\r\nconst contactsPersistConfig = {\r\n  key: \"ContactsList\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n});\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\nconst persistor = persistStore(store);\r\nconst storeExp = { store, persistor };\r\n\r\nexport default storeExp;\r\n","export const getContacts = (state) => state.contacts.contactItems;\r\n\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getFiltredContacts = (state) => {\r\n  const lowerCasedFilter = getFilter(state).toLowerCase();\r\n  const filteredContacts = getContacts(state).filter(({ name }) =>\r\n    name.toLowerCase().includes(lowerCasedFilter)\r\n  );\r\n  return filteredContacts;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getContacts } from \"../Redux/Contacts/contacts-selectors\";\r\nimport actions from \"../Redux/Contacts/contacts-action\";\r\n\r\nconst ContactForm = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const onInputChange = (event) => {\r\n    const { name, value } = event.currentTarget;\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const contactExist = contacts.find(\r\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n\r\n    if (contactExist) {\r\n      setName(\"\");\r\n      setNumber(\"\");\r\n      alert(`${name} already exsist at phonebook `);\r\n      return;\r\n    }\r\n\r\n    dispatch(actions.addContact({ name, number }));\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <label>\r\n        Name\r\n        <input\r\n          onChange={onInputChange}\r\n          value={name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n      <label>\r\n        Phone\r\n        <input\r\n          value={number}\r\n          onChange={onInputChange}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n      <button type=\"submit\">Add contacts</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { getFilter } from \"../Redux/Contacts/contacts-selectors\";\r\nimport actions from \"../Redux/Contacts/contacts-action\";\r\n\r\nconst Filter = () => {\r\n  const filter = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  const onChange = (e) => {\r\n    dispatch(actions.changeFilter(e.currentTarget.value));\r\n  };\r\n  return (\r\n    <label>\r\n      Filter by name\r\n      <input type=\"text\" value={filter} onChange={onChange} />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { getFiltredContacts } from \"../Redux/Contacts/contacts-selectors\";\r\n\r\nimport actions from \"../Redux/Contacts/contacts-action\";\r\n\r\nconst ContactList = () => {\r\n  const contact = useSelector(getFiltredContacts);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <ul>\r\n      {contact.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          <p>\r\n            {name}\r\n            <span>{number}</span>\r\n          </p>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => dispatch(actions.deleteContact(id))}\r\n          >\r\n            Удалить\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import ContactForm from \"./components/Form\";\r\nimport Filter from \"./components/Filter\";\r\nimport ContactList from \"./components/ContactList\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./components/Redux/store\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}