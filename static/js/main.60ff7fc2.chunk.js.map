{"version":3,"sources":["components/Redux/Contacts/contacts-actions.jsx","components/Redux/Contacts/contacts-reducer.jsx","components/Redux/store.js","components/Redux/Contacts/contacts-selectors.jsx","components/Redux/Contacts/contacts-operations.jsx","components/Form/Form.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","index.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","items","createReducer","state","payload","filter","id","loading","error","_","action","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","contactsReducer","devTools","process","getContacts","getFilterValue","createSelector","allContacts","regExp","RegExp","contact","test","name","axios","defaults","baseURL","ContactForm","useSelector","dispatch","useDispatch","onSubmit","number","post","then","data","catch","addContact","useState","setName","setNumber","event","preventDefault","namesIsIn","reduce","acc","numbersIsIn","includes","alert","contactCheck","type","value","placeholder","onChange","currentTarget","Filter","e","actions","target","ContactList","onDeleteContact","contactID","delete","map","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60ff7fc2.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchContactRequest = createAction(\"contacts/fetchContactRequest\");\r\nexport const fetchContactSuccess = createAction(\"contacts/fetchContactSuccess\");\r\nexport const fetchContactError = createAction(\"contacts/fetchContactError\");\r\n\r\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\r\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nexport const addContactError = createAction(\"contacts/addContactError\");\r\nexport const deleteContactRequest = createAction(\r\n  \"contacts/deleteContactRequest\"\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  \"contacts/deleteContactSuccess\"\r\n);\r\nexport const deleteContactError = createAction(\"contacts/deleteContactError\");\r\n\r\nexport const changeFilter = createAction(\"contacts/changeFilter\");\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  changeFilter,\r\n} from \"../Contacts/contacts-actions\";\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (state, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactRequest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => true,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [changeFilter]: (state, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [fetchContactError]: (_, action) => action.payload,\r\n  [fetchContactRequest]: () => null,\r\n  [addContactRequest]: () => null,\r\n  [deleteContactRequest]: () => null,\r\n  [deleteContactError]: (_, action) => action.payload,\r\n  [addContactError]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","import {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  /* persistStore, */\r\n  /* persistReducer, */\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n/* import storage from 'redux-persist/lib/storage'; */\r\nimport contactsReducer from './Contacts/contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n/* const contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n}; */\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer/* persistReducer(contactsPersistConfig, contactsReducer) */,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n/* const persistor = persistStore(store); */\r\n\r\n/* export default { store, persistor }; */\r\nexport default store;","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = state => state.contacts.items;\r\n\r\nexport const getFilterValue = state => state.contacts.filter;\r\n\r\nexport const getFilteredContactList = createSelector(\r\n  [getContacts, getFilterValue],\r\n  (allContacts, filter) => {\r\n    const regExp = new RegExp(filter, 'gi');\r\n\r\n    if (filter) {\r\n    return allContacts.filter(contact => regExp.test(contact.name));\r\n    }\r\n    return allContacts;\r\n  },\r\n);","import axios from \"axios\";\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from \"./contacts-actions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:3001\";\r\n\r\nexport const fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactRequest);\r\n\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\n\r\nexport const addContact =\r\n  ({ name, number }) =>\r\n  (dispatch) => {\r\n    const contact = {\r\n      name,\r\n      number,\r\n    };\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n      .post(\"/contacts\", contact)\r\n      .then(({ data }) => dispatch(addContactSuccess(data)))\r\n      .catch((error) => dispatch(addContactError(error)));\r\n  };\r\n\r\nexport const deleteContact = (contactID) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactID}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactID)))\r\n    .catch((error) => dispatch(deleteContactError(error)));\r\n};\r\n","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getContacts } from '../Redux/Contacts/contacts-selectors';\r\nimport { addContact } from '../Redux/Contacts/contacts-operations';\r\n\r\n\r\nfunction ContactForm() {\r\n\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n   const onSubmit = (name, number) =>\r\n    dispatch(addContact(name, number));\r\n\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const contactCheck = () => {\r\n    const namesIsIn = contacts.reduce(\r\n      (acc, contact) => [...acc, contact.name],\r\n      [],\r\n    );\r\n    const numbersIsIn = contacts.reduce(\r\n      (acc, contact) => [...acc, contact.number],\r\n      [],\r\n    );\r\n\r\n    if (namesIsIn.includes(name) || numbersIsIn.includes(number)) {\r\n      alert(`${name}${number} Already exist`);\r\n    }\r\n\r\n    if (name === '' || number === '') {\r\n      alert('Not enough data');\r\n    }\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    setName('');\r\n    setNumber('');\r\n    if (contactCheck()) {\r\n      return;\r\n    }\r\n\r\n    onSubmit(name, number);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} >\r\n      <label >\r\n        Name:\r\n          <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          placeholder=\"Jack Sparrow\"\r\n          onChange={event => setName(event.currentTarget.value)}\r\n          \r\n        />\r\n      </label>\r\n\r\n      <label >\r\n        Number:\r\n          <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          placeholder=\"111-11-11\"\r\n          onChange={event => setNumber(event.currentTarget.value)}\r\n          \r\n        />\r\n      </label>\r\n      <button type=\"submit\" >\r\n        Add contact\r\n        </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ContactForm;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { getFilterValue } from \"../Redux/Contacts/contacts-selectors\";\r\nimport * as actions from '../Redux/Contacts/contacts-actions';\r\n\r\nconst Filter = () => {\r\n  const filter = useSelector(getFilterValue);\r\n  const dispatch = useDispatch();\r\n\r\n  const onChange = (e) => {\r\n    dispatch(actions.changeFilter(e.target.value));\r\n  };\r\n  return (\r\n    <label>\r\n      Filter by name\r\n      <input type=\"text\" value={filter} onChange={onChange} />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { getContacts } from \"../Redux/Contacts/contacts-selectors\";\r\nimport * as operations from '../Redux/Contacts/contacts-operations';\r\n\r\nfunction ContactList() {\r\n\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n  const onDeleteContact = id => dispatch(operations.deleteContact(id));\r\n\r\n  return (\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} >\r\n          <p >\r\n            {name}: {number}\r\n          </p>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n            \r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default ContactList;\r\n","import ContactForm from \"./components/Form\";\r\nimport Filter from \"./components/Filter\";\r\nimport ContactList from \"./components/ContactList\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./components/Redux/store\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}